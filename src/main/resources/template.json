{
  "configJSON": {
    "synchronous": {
      "upgradeType": "increment"
    }
  },
  "projectJSON": {
    "profile": {
      "defaultFields": [
        {
          "notNull": true,
          "chnname": "主键",
          "defaultValue": "",
          "dataType": "VARCHAR(32)",
          "autoIncrement": false,
          "name": "id",
          "typeName": "标识号",
          "remark": "",
          "pk": true,
          "uiHint": "",
          "type": "IdOrKey",
          "relationNoShow": false
        },
        {
          "notNull": false,
          "chnname": "删除标识（0-正常,1-删除）",
          "defaultValue": "'0'",
          "dataType": "CHAR(1)",
          "autoIncrement": false,
          "name": "del_flag",
          "typeName": "单字符",
          "remark": "",
          "pk": false,
          "uiHint": "",
          "type": "Char",
          "relationNoShow": true
        },
        {
          "notNull": false,
          "chnname": "乐观锁",
          "defaultValue": "",
          "dataType": "INT",
          "autoIncrement": false,
          "name": "revision",
          "typeName": "整数",
          "remark": "",
          "pk": false,
          "uiHint": "",
          "type": "Integer",
          "relationNoShow": true
        },
        {
          "notNull": false,
          "chnname": "创建人",
          "defaultValue": "",
          "dataType": "VARCHAR(32)",
          "autoIncrement": false,
          "name": "creator",
          "typeName": "标识号",
          "remark": "",
          "pk": false,
          "uiHint": "",
          "type": "IdOrKey",
          "relationNoShow": true
        },
        {
          "notNull": false,
          "chnname": "创建时间",
          "defaultValue": "CURRENT_TIMESTAMP",
          "dataType": "DATETIME",
          "autoIncrement": false,
          "name": "create_time",
          "typeName": "日期时间",
          "remark": "",
          "pk": false,
          "uiHint": "",
          "type": "DateTime",
          "relationNoShow": true
        },
        {
          "notNull": false,
          "chnname": "更新人",
          "defaultValue": "",
          "dataType": "VARCHAR(32)",
          "autoIncrement": false,
          "name": "updater",
          "typeName": "标识号",
          "remark": "",
          "pk": false,
          "uiHint": "",
          "type": "IdOrKey",
          "relationNoShow": true
        },
        {
          "notNull": false,
          "chnname": "更新时间",
          "defaultValue": "",
          "dataType": "DATETIME",
          "autoIncrement": false,
          "name": "update_time",
          "typeName": "日期时间",
          "remark": "",
          "pk": false,
          "uiHint": "",
          "type": "DateTime",
          "relationNoShow": true
        }
      ]
    },
    "modules": [],
    "dataTypeDomains": {
      "database": [
        {
          "template": "DROP TABLE `{{=it.entity.title}}`;\n$blankline\nCREATE TABLE `{{=it.entity.title}}`(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}} {{= field.pk ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.entity.chnname,it.entity.remark,';') }}'",
          "code": "MYSQL",
          "deleteIndexTemplate": "ALTER TABLE `{{=it.entity.title}}` DROP INDEX `{{=it.index.name}}`;{{=it.separator}}",
          "createIndexTemplate": "ALTER TABLE `{{=it.entity.title}}` ADD {{? it.index.isUnique}}UNIQUE{{??}}INDEX{{?}} `{{=it.index.name}}`({{=it.func.join(...it.index.fields,',')}});{{=it.separator}}",
          "createFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` ADD COLUMN `{{=it.field.name}}` {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{??}}{{=it.field.defaultValue}}{{?}}{{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.pk}}PRIMARY KEY{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}} {{? it.field.addAfter}}AFTER {{=it.field.addAfter}}{{?}};{{=it.separator}}",
          "fileShow": true,
          "updateTableComment": "ALTER TABLE `{{=it.entity.title}}` COMMENT '{{=it.entity.chnname}}';{{=it.separator}}",
          "createTableTemplate": "CREATE TABLE `{{=it.entity.title}}`(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.dataType}}{{=field.remark}} {{= field.notNull ? 'NOT NULL' : '' }} {{= field.autoIncrement ? 'AUTO_INCREMENT' : '' }} {{= field.defaultValue ? it.func.join('DEFAULT',field.defaultValue,' ') : '' }} COMMENT '{{=it.func.join(field.chnname,' ')}}' {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.entity.chnname,' ') }}';{{=it.separator}}\n$blankline\n",
          "deleteTableTemplate": "DROP TABLE `{{=it.entity.title}}`;{{=it.separator}}",
          "rebuildTableTemplate": "create table ERD_UP_{{=it.oldEntity.title}}\nas select * from {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\nCREATE TABLE {{=it.newEntity.title}}(\n{{ pkList = [] ; }}\n{{~it.newEntity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}} {{= field.notNull ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.newEntity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.newEntity.chnname,it.newEntity.remark,';') }}';{{=it.separator}}\n$blankline\n\n{{ sameCols = it.func.intersect(it.newEntity.fields,it.oldEntity.fields) ;}}\ninsert into {{=it.newEntity.title}}(\n{{~sameCols:field:index}}\n    `{{=field.name}}`{{? index<sameCols.length-1}},{{?}}\n{{~}}\n) \nselect \n{{~sameCols:field:index}}\n    `{{=field.name}}`{{? index<sameCols.length-1}},{{?}}\n{{~}}\nfrom ERD_UP_{{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table ERD_UP_{{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n{{~it.newEntity.indexs:index}}\nALTER TABLE {{=it.newEntity.title}} ADD {{? index.isUnique}}UNIQUE{{??}}INDEX{{?}} {{=index.name}}({{=it.func.join(...index.fields,',')}});{{=it.separator}}\n{{~}}",
          "defaultDatabase": true,
          "updateFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` MODIFY COLUMN `{{=it.field.name}}` {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{?? 'CURRENT_TIMESTAMP' == it.field.defaultValue}}CURRENT_TIMESTAMP{{??}}{{=it.field.defaultValue}}{{?}} {{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}};{{=it.separator}}",
          "deleteFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` DROP `{{=it.field.name}}`;{{=it.separator}}"
        },
        {
          "template": "DROP TABLE `{{=it.entity.title}}`;{{=it.separator}}\n$blankline\nCREATE TABLE `{{=it.entity.title}}`(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}}  {{= field.pk ? 'NOT NULL' : '' }} {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n);{{=it.separator}}\n$blankline\nCOMMENT ON TABLE `{{=it.entity.title}}` IS '{{=it.func.join(it.entity.chnname,it.entity.remark,';') }}';{{=it.separator}}\n{{~it.entity.fields:field:index}}\nCOMMENT ON COLUMN `{{=it.entity.title}}`.`{{=field.name}}` IS '{{=it.func.join(field.chnname,field.remark,';')}}';{{=it.separator}}\n{{~}}",
          "createFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` ADD(`{{=it.field.name}}` {{=it.field.type}}{{? it.field.defaultValue}} DEFAULT {{=it.field.defaultValue}}{{?}}{{? it.field.notNull}} NOT NULL{{?}});{{=it.separator}}\r\n{{? it.field.chnname || it.field.remark}}COMMENT ON COLUMN `{{=it.entity.title}}`.`{{=it.field.name}}` IS {{? it.field.remark}}'{{=it.field.remark}}'{{??}}'{{=it.field.chnname}}'{{?}};{{=it.separator}}{{?}}\r\n$blankline",
          "code": "ORACLE",
          "updateTableComment": "{{? it.entity.chnname || it.entity.remark}}COMMENT ON TABLE `{{=it.entity.title}}` IS {{? it.entity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.entity.chnname}}'{{?}};{{=it.separator}}{{?}}\r\n$blankline",
          "createTableTemplate": "CREATE TABLE `{{=it.entity.title}}`(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}}{{? field.defaultValue}} DEFAULT {{=field.defaultValue}}{{?}}{{= field.notNull ? ' NOT NULL' : '' }}{{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n);{{=it.separator}}\n$blankline\n{{? it.entity.chnname || it.entity.remark}}COMMENT ON TABLE `{{=it.entity.title}}` IS {{? it.entity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.entity.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~it.entity.fields:field:index}}\n{{? field.chnname || field.remark}}COMMENT ON COLUMN `{{=it.entity.title}}`.`{{=field.name}}` IS {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~}}",
          "deleteTableTemplate": "DROP TABLE `{{=it.entity.title}}`;{{=it.separator}}\r\n$blankline",
          "deleteIndexTemplate": "DROP INDEX `{{=it.entity.title}}`.`{{=it.index.name}}`;{{=it.separator}}\r\n$blankline",
          "rebuildTableTemplate": "CREATE TABLE ERD_UP_{{=it.oldEntity.title}}\nAS SELECT * FROM {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\nDROP TABLE {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\nCREATE TABLE {{=it.newEntity.title}}(\n{{ pkList = [] ; }}{{~it.newEntity.fields:field:index}}{{? field.pk }}{{ pkList.push(field.name) }}{{?}}    `{{=field.name}}` {{=field.type}}{{? field.defaultValue}} DEFAULT {{=field.defaultValue}}{{?}}{{= field.notNull ? ' NOT NULL' : '' }}{{= index < it.newEntity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}{{? pkList.length >0 }}    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}}){{?}}\n);{{=it.separator}}\n$blankline\n{{? it.newEntity.chnname || it.newEntity.remark}}COMMENT ON TABLE {{=it.newEntity.title}} IS {{? it.newEntity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.newEntity.chnname}}'{{?}};{{?}}{{=it.separator}}\n{{~it.newEntity.fields:field:index}}\n{{? field.chnname || field.remark}}COMMENT ON COLUMN {{=it.newEntity.title}}.`{{=field.name}}` IS {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}};{{?}}{{=it.separator}}\n{{~}}\n{{ sameCols = it.func.intersect(it.newEntity.fields,it.oldEntity.fields) ;}}\n$blankline\nINSERT INTO {{=it.newEntity.title}}(\n{{~sameCols:field:index}}   `{{=field.name}}`{{? index<sameCols.length-1}},{{?}}\n{{~}}) \nSELECT\n{{~sameCols:field:index}}   `{{=field.name}}`{{? index<sameCols.length-1}},{{?}}\n{{~}}FROM ERD_UP_{{=it.oldEntity.title}};{{=it.separator}}\n\nDROP TABLE ERD_UP_{{=it.oldEntity.title}};{{=it.separator}}\n{{~it.newEntity.indexs:index}}\nCREATE{{? index.isUnique}} UNIQUE{{?}} INDEX {{=index.name}} ON {{=it.newEntity.title}}({{=it.func.join(index.fields,',')}});{{=it.separator}}\n{{~}}",
          "createIndexTemplate": "CREATE{{? it.index.isUnique}} UNIQUE{{?}} INDEX `{{=it.index.name}}` ON `{{=it.entity.title}}`({{=it.func.join(it.index.fields,',')}});{{=it.separator}}\r\n$blankline",
          "updateFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` MODIFY(`{{=it.field.name}}` {{=it.field.type}}{{? it.field.defaultValue}} DEFAULT {{=it.field.defaultValue}}{{?}}{{? it.field.notNull}} NOT NULL{{?}});{{=it.separator}}\r\n{{? it.field.chnname || it.field.remark}}COMMENT ON COLUMN `{{=it.entity.title}}`.`{{=it.field.name}}` IS {{? it.field.remark}}'{{=it.field.remark}}'{{??}}'{{=it.field.chnname}}'{{?}};{{=it.separator}}{{=it.separator}}{{?}}\r\n$blankline",
          "deleteFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` DROP(`{{=it.field.name}}`);{{=it.separator}}\r\n$blankline"
        },
        {
          "code": "SQLServer",
          "createTableTemplate": "CREATE TABLE `{{=it.entity.title}}`(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}} {{= field.notNull ? 'NOT NULL' : '' }} {{= field.autoIncrement ? 'IDENTITY(1,1)' : '' }} {{= field.defaultValue ? it.func.join('DEFAULT',field.defaultValue,' ') : '' }}  {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    CONSTRAINT PK_`{{=it.entity.title}}` PRIMARY KEY CLUSTERED ({{~pkList:pkName:i}}{{= pkName }} ASC {{= i<pkList.length-1 ? ',' : '' }}{{~}}) ON [PRIMARY] \n{{?}}\n) ;{{=it.separator}}\n\n$blankline\nEXECUTE sp_addextendedproperty N'MS_Description', '{{= it.entity.chnname || it.entity.remark}}', N'user', N'dbo', N'table', N'`{{=it.entity.title}}`', NULL, NULL;{{=it.separator}}\n{{~it.entity.fields:field:index}}\n{{? field.chnname || field.remark}}EXECUTE sp_addextendedproperty N'MS_Description', {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}}, N'user', N'dbo', N'table', N'`{{=it.entity.title}}`', N'column', N'`{{=field.name}}`';{{=it.separator}}{{?}}\n{{~}}\n"
        },
        {
          "template": "DROP TABLE `{{=it.entity.title}}`;\n$blankline\nCREATE TABLE `{{=it.entity.title}}`(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}} {{= field.pk ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.entity.chnname,it.entity.remark,';') }}'",
          "createFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` ADD COLUMN `{{=it.field.name}}` {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{??}}{{=it.field.defaultValue}}{{?}}{{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.pk}}PRIMARY KEY{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}} {{? it.field.addAfter}}AFTER {{=it.field.addAfter}}{{?}};{{=it.separator}}",
          "code": "PostgreSQL",
          "updateTableComment": "ALTER TABLE `{{=it.entity.title}}` COMMENT '{{=it.entity.chnname}}';{{=it.separator}}",
          "createTableTemplate": "CREATE TABLE `{{=it.entity.title}}`(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}}{{? field.defaultValue}} DEFAULT {{=field.defaultValue}}{{?}}{{= field.notNull ? ' NOT NULL' : '' }}{{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n);{{=it.separator}}\n$blankline\n{{? it.entity.chnname || it.entity.remark}}COMMENT ON TABLE `{{=it.entity.title}}` IS {{? it.entity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.entity.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~it.entity.fields:field:index}}\n{{? field.chnname || field.remark}}COMMENT ON COLUMN `{{=it.entity.title}}`.`{{=field.name}}` IS {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~}}",
          "deleteTableTemplate": "DROP TABLE `{{=it.entity.title}}`;{{=it.separator}}",
          "deleteIndexTemplate": "ALTER TABLE `{{=it.entity.title}}` DROP INDEX `{{=it.index.name}}`;{{=it.separator}}",
          "rebuildTableTemplate": "create table ERD_UP_{{=it.oldEntity.title}}\nas select * from {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\nCREATE TABLE {{=it.newEntity.title}}(\n{{ pkList = [] ; }}\n{{~it.newEntity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    `{{=field.name}}` {{=field.type}} {{= field.notNull ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.newEntity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.newEntity.chnname,it.newEntity.remark,';') }}';{{=it.separator}}\n$blankline\n\n{{ sameCols = it.func.intersect(it.newEntity.fields,it.oldEntity.fields) ;}}\ninsert into {{=it.newEntity.title}}(\n{{~sameCols:field:index}}\n    `{{=field.name}}`{{? index<sameCols.length-1}},{{?}}\n{{~}}\n) \nselect \n{{~sameCols:field:index}}\n    `{{=field.name}}`{{? index<sameCols.length-1}},{{?}}\n{{~}}\nfrom ERD_UP_{{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table ERD_UP_{{=it.oldEntity.title}};{{=it.separator}}",
          "createIndexTemplate": "ALTER TABLE `{{=it.entity.title}}` ADD {{? it.index.isUnique}}UNIQUE{{??}}INDEX{{?}} `{{=it.index.name}}`({{=it.func.join(...it.index.fields,',')}});{{=it.separator}}",
          "updateFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` MODIFY COLUMN `{{=it.field.name}}` {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{??}}{{=it.field.defaultValue}}{{?}}{{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}};{{=it.separator}}",
          "deleteFieldTemplate": "ALTER TABLE `{{=it.entity.title}}` DROP `{{=it.field.name}}`;{{=it.separator}}"
        },
        {
          "template": "package group.rober.erd.{{=it.module.name}}.entity;\n$blankline\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.util.Date;\n$blankline\n$blankline\n\n/** {{=it.entity.chnname}} */\n@Table(name=\"`{{=it.entity.title}}`\")\npublic class {{=it.func.camel(it.entity.title,true) }} implements Serializable,Cloneable{\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    {{? field.pk }}\n    @Id\n    @GeneratedValue\n    {{?}}\n    private {{=field.type}} {{=it.func.camel(field.name,false)}} ;\n{{~}}\n$blankline\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public {{=field.type}} get{{=it.func.camel(field.name,true)}}(){\n        return this.{{=it.func.camel(field.name,false)}};\n    }\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public void set{{=it.func.camel(field.name,true)}}({{=field.type}} {{= it.func.camel(field.name,false) }}){\n        this.{{=it.func.camel(field.name,false)}} = {{= it.func.camel(field.name,false) }};\n    }\n{{~}}\n}",
          "createFieldTemplate": "",
          "code": "JAVA",
          "updateTableComment": "",
          "createTableTemplate": "package group.rober.erd.{{=it.module.name}}.entity;\n$blankline\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.util.Date;\n$blankline\n$blankline\n@Table(name=\"`{{=it.entity.title}}`\")\npublic class {{=it.func.camel(it.entity.title,true) }} implements Serializable,Cloneable{\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    {{? field.pk }}\n    @Id\n    @GeneratedValue\n    {{?}}\n    private {{=field.type}} {{=it.func.camel(field.name,false)}} ;\n{{~}}\n$blankline\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public {{=field.type}} get{{=it.func.camel(field.name,true)}}(){\n        return this.{{=it.func.camel(field.name,false)}};\n    }\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public void set{{=it.func.camel(field.name,true)}}({{=field.type}} {{= it.func.camel(field.name,false) }}){\n        this.{{=it.func.camel(field.name,false)}} = {{= it.func.camel(field.name,false) }};\n    }\n{{~}}\n}",
          "deleteTableTemplate": "",
          "deleteIndexTemplate": "",
          "rebuildTableTemplate": "",
          "createIndexTemplate": "",
          "updateFieldTemplate": "",
          "deleteFieldTemplate": ""
        }
      ],
      "datatype": [
        {
          "code": "String",
          "apply": {
            "JAVA": {
              "type": "String"
            },
            "MYSQL": {
              "type": "VARCHAR"
            },
            "PostgreSQL": {
              "type": "VARCHAR"
            },
            "ORACLE": {
              "type": "NVARCHAR2"
            },
            "SQLServer": {
              "type": "NVARCHAR"
            }
          },
          "name": "变长字符串"
        },
        {
          "code": "Char",
          "apply": {
            "JAVA": {
              "type": "String"
            },
            "MYSQL": {
              "type": "CHAR"
            },
            "PostgreSQL": {
              "type": "CHAR"
            },
            "ORACLE": {
              "type": "CHAR"
            },
            "SQLServer": {
              "type": "CHAR"
            }
          },
          "name": "字符串"
        },
        {
          "code": "Text",
          "apply": {
            "JAVA": {
              "type": "String"
            },
            "MYSQL": {
              "type": "TEXT"
            },
            "PostgreSQL": {
              "type": "TEXT"
            },
            "ORACLE": {
              "type": "CLOB"
            },
            "SQLServer": {
              "type": "NTEXT"
            }
          },
          "name": "文本"
        },
        {
          "code": "Double",
          "apply": {
            "JAVA": {
              "type": "Double"
            },
            "MYSQL": {
              "type": "DECIMAL(32,10)"
            },
            "PostgreSQL": {
              "type": "DECIMAL(32,10)"
            },
            "ORACLE": {
              "type": "NUMBER(32,10)"
            },
            "SQLServer": {
              "type": "DECIMAL(32,10)"
            }
          },
          "name": "小数"
        },
        {
          "code": "TinyInt",
          "apply": {
            "JAVA": {
              "type": "Integer"
            },
            "MYSQL": {
              "type": "TINYINT"
            },
            "PostgreSQL": {
              "type": "TINYINT"
            },
            "ORACLE": {
              "type": "TINYINT"
            },
            "SQLServer": {
              "type": "TINYINT"
            }
          },
          "name": "微小整数"
        },
        {
          "code": "SmallInt",
          "apply": {
            "JAVA": {
              "type": "Integer"
            },
            "MYSQL": {
              "type": "SMALLINT"
            },
            "PostgreSQL": {
              "type": "SMALLINT"
            },
            "ORACLE": {
              "type": "SMALLINT"
            },
            "SQLServer": {
              "type": "SMALLINT"
            }
          },
          "name": "小整数"
        },
        {
          "code": "Integer",
          "apply": {
            "JAVA": {
              "type": "Integer"
            },
            "MYSQL": {
              "type": "INT"
            },
            "PostgreSQL": {
              "type": "INT"
            },
            "ORACLE": {
              "type": "INT"
            },
            "SQLServer": {
              "type": "INT"
            }
          },
          "name": "整数"
        },
        {
          "code": "BigInt",
          "apply": {
            "JAVA": {
              "type": "Long"
            },
            "MYSQL": {
              "type": "BIGINT"
            },
            "PostgreSQL": {
              "type": "BIGINT"
            },
            "ORACLE": {
              "type": "NUMBER"
            },
            "SQLServer": {
              "type": "BIGINT"
            }
          },
          "name": "大整数"
        },
        {
          "code": "BigIntUnsigned",
          "apply": {
            "JAVA": {
              "type": "Long"
            },
            "MYSQL": {
              "type": "BIGINT UNSIGNED"
            },
            "PostgreSQL": {
              "type": "BIGINT UNSIGNED"
            },
            "ORACLE": {
              "type": "NUMBER UNSIGNED"
            },
            "SQLServer": {
              "type": "BIGINT UNSIGNED"
            }
          },
          "name": "无符号大整数"
        },
        {
          "code": "Date",
          "apply": {
            "JAVA": {
              "type": "Date"
            },
            "MYSQL": {
              "type": "DATE"
            },
            "PostgreSQL": {
              "type": "DATE"
            },
            "ORACLE": {
              "type": "DATE"
            },
            "SQLServer": {
              "type": "DATE"
            }
          },
          "name": "日期"
        },
        {
          "code": "DateTime",
          "apply": {
            "JAVA": {
              "type": "Date"
            },
            "MYSQL": {
              "type": "DATETIME"
            },
            "PostgreSQL": {
              "type": "DATE"
            },
            "ORACLE": {
              "type": "DATE"
            },
            "SQLServer": {
              "type": "DATE"
            }
          },
          "name": "日期时间"
        }
      ]
    }
  },
  "id": "",
  "projectName": "",
  "type": "1"
}
